CRTZ Language - Interactive Dialogue and Narrative Scripting

Overview:

CRTZ -  is a scripting language designed for creating interactive dialogues, narratives, and text-based adventures. It supports object-oriented programming concepts, branching dialogues, variables, and includes a built-in debugger and its developed by a 3rd year computer engineering student named Patrick Andrew Cortez

Syntaxes: 


[Picture Arrays (Image Support)]:

picture images[10] = load("path/to/images/folder"); // Loads all images from folder into an array
display(images[0]); // Display the first image in the array
display("single_image.png"); // Display a single image

[Comments]:

// This is a single line comment

[Variables and Data Types]:

int health = 100;
string name = "Player";
match isAlive = true;

[Characters and Objects]:

class Character {
    int health = 100;
    int strength = 10;
    
    void attack(Character target) {
        target.health = target.health - this.strength;
    }
}

new hero Character;
new enemy Character;

[Nodes (Dialogue Sections)]:

node start {
    line "Hello, [@You]! Welcome to our adventure.";
    show "This is a multi-line",
         "dialogue system";
    
    choice 1: "Introduce yourself" -> introduction;
    choice 2: "Attack the dragon" -> battle;
}

node introduction {
    line "My name is ${playerName}";
    set playerName = "Arthur";
    goto end;
}

[Control Flow]:

if (health <= 0) goto game_over;
else goto continue;

signal playerDied = true;

[Expressions and Operations]:

set damage = baseDamage * (1 + strength/100);
set isStrong = strength > 50;

[Rooms (Experimental)(Basically)]:

room tavern {
    desc "A cozy tavern with a fireplace";
    exit north town_square;
    item sword;
    npc bartender;
}

Simple Programs:

[Simple Dialogue]:

npc "Guard";
desc "A conversation with a castle guard";

node start {
    line "Halt! Who goes there?";
    choice 1: "I'm a friend" -> friendly;
    choice 2: "None of your business" -> hostile;
}

node friendly {
    line "You may pass, friend.";
    end;
}

node hostile {
    line "Then you shall not pass!";
    end;
}

[Character System]:

class Character {
    int health = 100;
    int mana = 50;
    
    void heal(int amount) {
        this.health = this.health + amount;
        if (this.health > 100) {
            this.health = 100;
        }
    }
}

new player Character;
new enemy Character;

node battle {
    line "The enemy attacks!";
    enemy.health = enemy.health - player.strength;
    if (enemy.health <= 0) goto victory;
    else goto defeat;
}

[Room Based Adventure]:

room forest {
    desc "A dense forest with tall trees";
    exit north castle;
    exit east river;
    item mushroom;
}

room castle {
    desc "An ancient castle with tall towers";
    exit south forest;
    exit west dungeon;
    npc dragon;
}

node explore {
    show "You are in: ${currentRoom}",
         "${currentRoom.description}";
    
    if (currentRoom.hasItem("sword")) {
        line "You found a sword!";
        set hasSword = true;
    }
    
    // More exploration logic...
}

Special features:

[variable substiution]:
set playerName = "Alice";
line "Hello, ${playerName}! Your health is ${health}";

[Special variables]:
[@You] - basically outputs what you put in the player name in c++


How to run: 

[Command-Line]:

crtz script.crtz
crtz --debug script.crtz  // Enable debugger

[From c++ code]:

#include "crtz_lang.h"
using namespace CRTZ;
// Run from source

int main(){
CRTZ::runSource("node start { line \"Hello!\"; }", "Player", false);

// Run from file
CRTZ::runScript("adventure.crtz", "Player", true);
}

Notes:

-Strings can contain escape sequences: \n for newline, \" for quote

-Boolean values use true/false literals

-bject field access: character.health

-Method calls: character.heal(20)

This language is particularly suited for:

-Interactive fiction games

-Dialogue systems

-Text-based adventures

-Narrative-driven experiences

-Game prototyping
